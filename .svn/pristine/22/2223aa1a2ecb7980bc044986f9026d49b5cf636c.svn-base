#include <cmath>
#include <iostream>
#include <sstream>
using namespace std;
#include "battlestate.h"
#include "button.h"
#include "combatchar.h"
#include "direction.h"
#include "imagebox.h"
#include "inputsystem.h"
#include "label.h"
#include "party.h"
#include "render.h"
#include "widget.h"
#include "rect.h"

BattleState::BattleState(InputSystem& input, Party& party, CombatChar** e,
	int numEnem) :	GameState(input), party(party) {

	finished = true;
	counter = 0;	
	rate = 60;
	isPaused = false;
	mode = BATTLE_IDLE;
	activeButton = 0;
	activeCharacter = 0;
	activeCommand = 0;
	activeTarget = 0;

	background = loadTexture("images/beach.pam"); 
	int labelTex = loadTexture("images/blank.pam");
	int buttonOn = loadTexture("images/buttonselected.pam");
	int buttonOff = loadTexture("images/buttonbase.pam");
	int boxTex = loadTexture("images/blank.pam");
	const Font* font = loadFont("fonts/FFVI.ttf", 32);

	//Logic for initializing the combat parties
	for(int i = 0; i < Party::MEMBER_COUNT; ++i) {
		player.push_back(new CombatChar(*party.getMember(i)));
		player[i]->setATB(rand() % 50);
	}

	for(int i = 0; i < numEnem; ++i) {
		enemies.push_back(e[i]);
		enemies[i]->setATB(rand() % 40);
	}

	//Widget creation
	Color white;
	Rect pos(0.0f, 320.0f, 640.0f, 480.0f);
	mainGUI = new Widget(pos, 0.0f);
	
	Rect commandBoxPos(0.0f, 0.0f, 120.0f, 160.0f);
	commandBox = new ImageBox(boxTex, commandBoxPos, 0.0f, mainGUI);
	for(int i = 0; i < 2; ++i) {
		Rect temp(0.0f, i * 25.0f, 120.0f, 25.0f);
		commandButton[i] = new Button(buttonOff, buttonOn, "Test",
			white, font, temp, 0.0f, commandBox);

	}

	for(int i = 0; i < 2; ++i) {
		if(i > 0) commandButton[i]->setNext(DIR_UP, commandButton[i - 1]);
		if(i < 1) commandButton[i]->setNext(DIR_DOWN, commandButton[i + 1]);
	}

	Rect targetBoxPos(120.0f, 0.f, 120.0f, 160.0f);
	targetBox = new ImageBox(boxTex, targetBoxPos, 0.0f, mainGUI);
	for(int i = 0; i < 4; ++i) {
		Rect temp(0.0f, i * 25.0f, 120.0f, 25.0f);
		targetButton[i] = new Button(buttonOff, buttonOn, "Test",
			white, font, temp, 0.0f, targetBox);
	}

	for(int i = 0; i < 4; ++i) {
		if(i > 0) targetButton[i]->setNext(DIR_UP, targetButton[i - 1]);
		if(i < 3) targetButton[i]->setNext(DIR_DOWN, targetButton[i + 1]);
	}

	std::stringstream buf("");
	buf << " " << player[0]->getName() << "\n";
	buf << " " << player[1]->getName();
	
	Rect namePos(240.0f, 0.0f, 120.0f, 160.f);
	playerNameDisplay = new Label(buf.str(), labelTex,
		white, font, namePos, 0.0f, mainGUI);

	buf.str("");
	buf << " " << player[0]->getCurrentHP() << "\n";
	buf << " " << player[1]->getCurrentHP();

	Rect hpPos(560.0f, 0.0f, 120.0f, 80.0f);
	playerHPDisplay = new Label(buf.str(), labelTex,
		white, font, hpPos, 0.0f, mainGUI);

	commandBox->hide();
	targetBox->hide();
	atbBar[0] = Rect(360,320,0,25);
	atbBar[1] = Rect(360,345,0,25);
	sprite1Pos = Rect(400,168,32,32); 
	sprite2Pos = Rect(400, 250, 32, 32);
	enemy1Pos = Rect(100, 120, 32, 32);
	enemy2Pos = Rect(60, 180, 32, 32);
	enemy3Pos = Rect(120, 240, 32, 32);
	enemy4Pos = Rect(90, 290, 32, 32);
	
	
}

BattleState::~BattleState() {
	delete mainGUI;
	for(unsigned int i = 0; i < player.size(); ++i) {
		delete player[i];
	}

	for(unsigned int i = 0; i < enemies.size(); ++i) {
		delete enemies[i];
	}
}

void BattleState::onOpen() {
	running = true;
	finished = true;
	isPaused = false;
	
}

void BattleState::onClose() {
	nextState = 0;
}

void BattleState::onFrame() {
	//Note: the below key input is for testing purposes. For functional gameplay, this guard should check the status of the bool combatCompleted variable 
	
	if(input.checkKeyState("e")) {
		std::cout << "Switching to exploration\n";
		running = false;
	}

	if(!isPaused && ++counter >= rate) {
		counter = 0;
		// Anything to be done every twenty frames
		for(unsigned int i = 0; i < player.size(); ++i) {
			player[i]->updateATB();

			if(player[i]->checkATB() && mode == BATTLE_IDLE) {
				openPlayerCommand(i);
			}
		}

		for(unsigned int i = 0; i < enemies.size(); ++i) {
			enemies[i]->updateATB();
			if(enemies[i]->checkATB()) {
				//Enemy is ready for action
				int cmd = rand() % 2;
				int target = rand() % 2;
				enemies[i]->performCommand(cmd, player[target]);
			}
		}

	}

	for(unsigned int i = 0; i < enemies.size() && i < 4; ++i) {
		if(activeButton == targetButton[i]) {
			activeTarget = enemies[i];
			break;
		}
	}

	if(input.checkKeyState("down")) {
		if(activeButton)
			activeButton = activeButton->move(DIR_DOWN);
	}

	if(input.checkKeyState("up")) {
		if(activeButton)
			activeButton = activeButton->move(DIR_UP);
	}

	if(input.checkKeyState("z")) {
		switch(mode) {
		case BATTLE_IDLE:
			break;
		case BATTLE_COMMAND:
			openTarget();
			activeButton = activeButton->move(DIR_ACCEPT);
			break;
		case BATTLE_TARGET:
			openIdle();
			if(player[activeCharacter]->performCommand(activeCommand, activeTarget)) {
			}
			break;
		default:
			break;
		}
	}

	if(input.checkKeyState("x")) {
		switch(mode) {
		case BATTLE_IDLE:
			break;
		case BATTLE_COMMAND:
			break;
		case BATTLE_TARGET:
			closeTarget();
			activeButton = activeButton->move(DIR_CANCEL);
			break;
		default:
			break;
		}
	}

	drawTexture(background, {0, 0, 640, 480}, {0, 0, 640, 480}, 10);
	mainGUI->draw();

	for(unsigned int i = 0; i < player.size(); ++i) {
		Color c;
		atbBar[i].w = player[i]->getATB() * 2;
		if(player[i]->checkATB()) c = Color(255, 255, 0);
		if(player[i]->checkATB() && i == activeCharacter) {
			c = Color(255, 0, 0);
		}
		drawBox(atbBar[i], c, 0);
	}
	
	update();
	drawTexture(player[0]->getExploreTex(), sprite1Pos, {0,0,32,32}, 2.5);
	drawTexture(player[1]->getExploreTex(), sprite2Pos, {0,0,32,32}, 2.5);
	drawTexture(enemies[0]->getExploreTex(), enemy1Pos, {96,0,32,32}, 2.5);
	if(enemies[1] != 0) drawTexture(enemies[1]->getExploreTex(), enemy2Pos, {96,0,32,32}, 2.5);
	if(enemies[2] !=0) drawTexture(enemies[2]->getExploreTex(), enemy3Pos, {64,64,32,32}, 2.5);
	if(enemies[3] !=0) drawTexture(enemies[3]->getExploreTex(), enemy4Pos, {64,64,32,32}, 2.5);
	
} //Note to Joe, please read: part of the segfault bug appears to be coming from the rng variable in explorationstate affecting the above enemy drawTexture function calls. When the program works, it usually has 4 or occasionally 3 enemies, never 1 or 2. The above function calls need better guards to check whether an enemy exists or not. 

void BattleState::update() {
	std::stringstream buf("");
	buf << " " << player[0]->getName();
	if(player[0]->checkATB() && activeCharacter == 0)
		buf << "*\n";
	else
		buf << '\n';
	buf << " " << player[1]->getName();
	if(player[1]->checkATB() && activeCharacter == 1)
		buf << '*';
	playerNameDisplay->setText(buf.str());

	buf.str("");
	buf << " " << player[0]->getCurrentHP() << "\n";
	buf << " " << player[1]->getCurrentHP();
	playerHPDisplay->setText(buf.str());

	commandButton[0]->setText(player[activeCharacter]->getBattleCommand(0).name);
	commandButton[1]->setText(player[activeCharacter]->getBattleCommand(1).name);

	for(int i = 0; i < enemies.size() && i < 4; ++i) {
		targetButton[i]->setText(enemies[i]->getName());
		targetButton[i]->enable(true);
	}

	for(int i = enemies.size(); i < 4; ++i) {
		targetButton[i]->setText("");
		targetButton[i]->enable(false);
	}
}

void BattleState::openPlayerCommand(int id) {
	mode = BATTLE_COMMAND;
	if(activeButton)
		activeButton->setSelected(false);
	activeButton = commandButton[0];
	activeButton->setSelected(true);
	activeCharacter = id;
	isPaused = true;

	commandBox->show();
	commandButton[0]->setNext(DIR_ACCEPT, targetButton[0]);
	commandButton[1]->setNext(DIR_ACCEPT, targetButton[0]);
}

void BattleState::openTarget() {
	mode = BATTLE_TARGET;

	targetBox->show();
	targetButton[0]->setNext(DIR_CANCEL, activeButton);
	targetButton[1]->setNext(DIR_CANCEL, activeButton);
	targetButton[2]->setNext(DIR_CANCEL, activeButton);
	targetButton[3]->setNext(DIR_CANCEL, activeButton);

	if(activeButton == commandButton[0]) activeCommand = 0;
	if(activeButton == commandButton[1]) activeCommand = 1;
}

void BattleState::openIdle() {
	mode = BATTLE_IDLE;
	if(activeButton)
		activeButton->setSelected(false);
	activeButton = 0;
	isPaused = false;

	commandBox->hide();
	targetBox->hide();
}

void BattleState::closePlayerCommand() {
	mode = BATTLE_IDLE;
	if(activeButton)
		activeButton->setSelected(false);
	isPaused = false;

	commandBox->hide();
}

void BattleState::closeTarget() {
	mode = BATTLE_COMMAND;
	targetBox->hide();

}
